import time
import os
import glob
from datetime import datetime, timedelta, date
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# ==================== 配置区 ====================
CHROMEDRIVER_PATH = r"C:\Users\User\Downloads\chromedriver-win64\chromedriver-win64\chromedriver.exe"
LOGIN_URL = "https://admindmgkgir666.epiwin24admgf4f73402ghudsd9k1vie9g82h9.com/#/login"
USERNAME = "Touhou002"
PASSWORD = "123456"
# ================================================

def find_and_rename_newest_file(download_path, report_type, start_date_str, end_date_str, existing_files):
    """查找最新下载的文件并根据报表类型重命名"""
    print(f"  等待'{report_type}'报表文件下载完成...")
    time.sleep(15)
    
    current_files = set(glob.glob(os.path.join(download_path, '*.xlsx')) + glob.glob(os.path.join(download_path, '*.csv')))
    new_files = current_files - existing_files
    
    if not new_files:
        print(f"  [警告] 未找到为 {report_type} 下载的新文件！")
        return
    
    newest_file = new_files.pop()
    if report_type == "daily":
        new_filename = f"日报_{start_date_str}.csv"
    else:
        new_filename = f"{report_type.capitalize()}报_{start_date_str}_to_{end_date_str}.csv"
        
    new_filepath = os.path.join(download_path, new_filename)
    
    if os.path.exists(new_filepath): os.remove(new_filepath)
    os.rename(newest_file, new_filepath)
    print(f"  [成功] 文件已重命名为: {new_filename}")

# --- 主程序 ---
print("--- '三合一'报表最终版脚本开始运行 ---")
s = Service(CHROMEDRIVER_PATH)
chrome_options = Options()
# (伪装选项)
chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
chrome_options.add_experimental_option('useAutomationExtension', False)
chrome_options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36')
chrome_options.add_argument('--disable-blink-features=AutomationControlled')

try:
    driver = webdriver.Chrome(service=s, options=chrome_options)
    wait = WebDriverWait(driver, 20)
    driver.get(LOGIN_URL)
    
    # (登录)
    print("页面加载中，等待登录框...")
    username_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@placeholder='账户']")))
    password_input = driver.find_element(By.XPATH, "//input[@placeholder='密码']")
    login_button = driver.find_element(By.XPATH, "//button[contains(., '登录')]")
    print("正在输入账号密码并登录...")
    username_input.send_keys(USERNAME)
    password_input.send_keys(PASSWORD)
    login_button.click()
    
    # (手动验证)
    print("\n" + "="*50 + "\n脚本已暂停！请手动输入谷歌验证码并完成登录。")
    input("登录成功后，请回到此窗口，按 Enter (回车) 键继续...")
    print("\n" + "="*50 + "\n脚本已恢复，开始批量下载任务...")

    # (跳转)
    report_url = "https://admindmgkgir666.epiwin24admgf4f73402ghudsd9k1vie9g82h9.com/#/stat/dailySummaryChannel"
    print(f"直接跳转到报表页面...")
    driver.get(report_url)
    
    print("成功进入报表页面！")
    time.sleep(5)

    downloads_path = os.path.join(os.path.expanduser('~'), 'Downloads')
    report_types_to_download = ["daily", "weekly", "monthly"]
    for report_type in report_types_to_download:
        print(f"\n--- 正在处理: {report_type.upper()} 报表 ---")
        
        # === 终极修正：根据你的建议，使用快捷按钮，并删除查询按钮 ===
        if report_type == "daily":
            start_date = date.today() - timedelta(days=1)
            end_date = start_date
            start_date_str = start_date.strftime('%Y-%m-%d')
            end_date_str = end_date.strftime('%Y-%m-%d')
            print(f"  设置日期范围: {start_date_str} 到 {end_date_str}")
            start_date_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@placeholder='开始日期']")))
            end_date_input = driver.find_element(By.XPATH, "//input[@placeholder='结束日期']")
            start_date_input.clear(); time.sleep(0.5); start_date_input.send_keys(start_date_str)
            end_date_input.clear(); time.sleep(0.5); end_date_input.send_keys(end_date_str)
            driver.find_element(By.XPATH, "//body").click()
        
        elif report_type == "weekly":
            print("  点击【近7天】快捷按钮...")
            wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='近7天']"))).click()
        
        elif report_type == "monthly":
            print("  点击【近30天】快捷按钮...")
            wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='近30天']"))).click()

        # 等待点击快捷按钮或输入日期后，数据自动刷新
        print("  等待数据加载...")
        time.sleep(10) 
        
        # 重新获取日期以确保文件名准确
        start_date_str = driver.find_element(By.XPATH, "//input[@placeholder='开始日期']").get_attribute('value')
        end_date_str = driver.find_element(By.XPATH, "//input[@placeholder='结束日期']").get_attribute('value')
        print(f"  确认实际日期范围为: {start_date_str} 到 {end_date_str}")
        
        existing_files_before_download = set(glob.glob(os.path.join(downloads_path, '*.xlsx')) + glob.glob(os.path.join(downloads_path, '*.csv')))
        
        print("  正在点击'导出'按钮...")
        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(., '导出')]"))).click()
        
        find_and_rename_newest_file(downloads_path, report_type, start_date_str, end_date_str, existing_files_before_download)

    print("\n" + "="*50)
    print("🎉 全部任务成功！日报、周报、月报均已下载并重命名。")
    print("="*50)

except Exception as e:
    print(f"\n脚本运行中发生错误: {e}")

finally:
    if 'driver' in locals() and driver:
        driver.quit()
    print("--- 脚本运行结束 ---")
